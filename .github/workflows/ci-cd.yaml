name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Environment variables available to all jobs
env:
  DOCKER_IMAGE_NAME: saneles-country-api
  PYTHON_VERSION: '3.11'

jobs:
  build-and-artifact:
    runs-on: ubuntu-latest
    # Add permissions for writing artifacts and security events
    permissions:
      contents: read
      actions: write
      security-events: write

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python environment for linting and dependency installation
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' # Cache pip dependencies for faster builds

      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Install dependencies for linting and potential testing
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install flake8 bandit
        working-directory: ./backend

      # Run linting to enforce code quality
      - name: Run flake8 linting
        run: |
          flake8 backend/app --max-line-length=120 --exclude __init__.py
        continue-on-error: true # Allow pipeline to continue if linting fails

      # Run security scanning with Bandit
      - name: Run Bandit security scan
        run: |
          bandit -r backend/app -f json -o bandit-report.json || true
        continue-on-error: true

      # Upload Bandit report as artifact
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: backend/bandit-report.json
          retention-days: 7

      # Set up Docker Buildx for building the image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build and cache Docker image (multi-stage support)
      - name: Build Docker image
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t ${{ env.DOCKER_IMAGE_NAME }}:latest \
            -f backend/Dockerfile \
            ./backend \
            --load

      # Run Trivy for container image vulnerability scanning
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE_NAME }}:latest
          format: sarif
          output: trivy-results.sarif
        continue-on-error: true

      # Upload Trivy SARIF report for GitHub Code Scanning
      - name: Upload Trivy results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        if: always()

      # Save Docker image as tarball for artifact
      - name: Save Docker image
        run: |
          docker save -o saneles-country-api.tar ${{ env.DOCKER_IMAGE_NAME }}:latest

      # Upload Docker image as artifact
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: saneles-country-api-image
          path: saneles-country-api.tar
          retention-days: 7

      # Upload application files as artifact
      - name: Upload application files
        uses: actions/upload-artifact@v4
        with:
          name: saneles-country-api-files
          path: |
            backend/app/
            backend/requirements.txt
            backend/Dockerfile
            backend/.env.example
          retention-days: 7

      # Commented out test execution as requested
      # - name: Run tests
      #   run: |
      #     pytest tests -v
      #   working-directory: ./backend

      # Send Slack notification on failure (optional)
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'your-channel-id'
          text: 'CI/CD Pipeline failed for ${{ github.repository }} on ${{ github.event_name }} #${{ github.run_number }}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # Optional deployment job (commented out until needed)
  # deploy:
  #   needs: build-and-artifact
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Build and push Docker image
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest -f backend/Dockerfile ./backend
  #         docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest