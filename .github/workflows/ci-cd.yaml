name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: saneles-country-api
  PYTHON_VERSION: '3.11'

jobs:
  build-and-artifact:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: |
          ls -la
          ls -la python-backend || true
        working-directory: .

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: python-backend/requirements.txt

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('python-backend/Dockerfile', 'python-backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          save-always: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping installation"
          fi
          pip install flake8 bandit
        working-directory: ./python-backend

      - name: Run flake8 linting
        run: |
          flake8 app --max-line-length=120 --exclude __init__.py
        working-directory: ./python-backend
        continue-on-error: true

      - name: Run Bandit security scan
        run: |
          bandit -r app -f json -o bandit-report.json || true
        working-directory: ./python-backend
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: python-backend/bandit-report.json
          retention-days: 7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t ${{ env.DOCKER_IMAGE_NAME }}:latest \
            -f Dockerfile \
            . \
            --load
        working-directory: ./python-backend

      - name: Debug cache contents
        run: ls -la /tmp/.buildx-cache || true

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE_NAME }}:latest
          format: sarif
          output: trivy-results.sarif
        continue-on-error: true

      - name: Upload Trivy results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        if: always()

      - name: Save Docker image
        run: |
          docker save -o saneles-country-api.tar ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: saneles-country-api-image
          path: saneles-country-api.tar
          retention-days: 7

      - name: Upload application files
        uses: actions/upload-artifact@v4
        with:
          name: saneles-country-api-files
          path: |
            app/
            requirements.txt
            Dockerfile
            .env.example
          retention-days: 7
        working-directory: ./python-backend

      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'your-channel-id' # Replace with actual channel ID
          text: 'CI/CD Pipeline succeeded for ${{ github.repository }} on ${{ github.event_name }} #${{ github.run_number }}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: 'your-channel-id' # Replace with actual channel ID
          text: 'CI/CD Pipeline failed for ${{ github.repository }} on ${{ github.event_name }} #${{ github.run_number }}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
